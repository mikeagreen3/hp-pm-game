import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";
import { useState } from "react";
import { type } from "os";

enum Responses {
  Leverage,
  Nuetral,
  Overhead,
  Ignore,
}

type Scores = {
  squad: Number;
  feature: Number;
  product: Number;
  company: Number;
  motivation: Number;
  productExecution: Number;
  customerInsight: Number;
  influencingPeople: Number;
  productStrategy: Number;
};

const defaultScores: Scores = {
  squad: 20,
  feature: 20,
  product: 20,
  company: 20,
  motivation: 20,
  productExecution: 20,
  customerInsight: 20,
  influencingPeople: 20,
  productStrategy: 20,
};

const testCard = {
  id: 1,
  label: "Label",
  content:
    "Your tech lead comes to you and says we need more work for the front end devs.Do you want to take on more work?",
  reactions: {
    [Responses.Leverage]: {
      squad: 5,
      feature: -5,
    },
    [Responses.Nuetral]: {
      squad: 9,
      feature: -4,
    },
    [Responses.Overhead]: {
      squad: 2,
      feature: -1,
    },
    [Responses.Ignore]: {
      squad: 0,
      feature: 0,
    },
  },
};

type Card = typeof testCard;

const Home: NextPage = () => {
  //const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const [scores, setScores] = useState<any>({ ...defaultScores });
  const [card, setCard] = useState<any>(testCard);

  const handleResponse = (response: Responses, card: Card) => {
    const reactions = card.reactions[response];
    setScores((prev: any) => {
      let result = {};

      Object.keys(reactions).forEach((reaction) => {
        result[reaction] = prev[reaction] += reactions[reaction];
      });

      return { ...prev };
    });
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#6190f6] to-[#9da0ea]">
        <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
          The Product Manager Game
        </h1>
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <div className="grid grid-cols-3 gap-4 rounded-xl bg-white/10 p-4 text-white">
            <div className="col-span-2 flex flex-col items-center justify-center gap-4">
              <div className="max-w-200 w-full rounded bg-[#9ca3af] px-2 py-2">
                <div className="h-full min-h-fit max-w-fit rounded bg-white px-2 pb-10 pt-2	text-black">
                  <div className="relative">
                    <div className="left-0 top-0">
                      <span className="rounded bg-sky-500 px-3 py-1 font-bold text-white">
                        {card.label}
                      </span>
                    </div>
                    <div className="px-3 py-3">
                      <p>{card.content}</p>
                    </div>
                  </div>
                </div>
              </div>
              <div className="">
                <span className="flex py-1">Level of effort</span>
                <div className="flex items-center justify-center gap-4">
                  <button
                    onClick={() => handleResponse(Responses.Leverage, card)}
                    className="rounded-lg bg-[#94a3b8] px-8 py-2 duration-100 hover:bg-slate-600 hover:ease-in"
                  >
                    Leverage
                  </button>
                  <button
                    onClick={() => handleResponse(Responses.Nuetral, card)}
                    className="rounded-lg bg-[#94a3b8] px-8 py-2 duration-100 hover:bg-slate-600 hover:ease-in"
                  >
                    Nuetral
                  </button>
                  <button
                    onClick={() => handleResponse(Responses.Overhead, card)}
                    className="rounded-lg bg-[#94a3b8] px-8 py-2 duration-100 hover:bg-slate-600 hover:ease-in"
                  >
                    Overhead
                  </button>
                  <button
                    onClick={() => handleResponse(Responses.Ignore, card)}
                    className="rounded-lg bg-[#94a3b8] px-4 py-2 duration-100 hover:bg-slate-600 hover:ease-in"
                  >
                    Ignore
                  </button>
                </div>
              </div>
            </div>
            <div>
              <h2 className="text-lg font-bold uppercase">Scores</h2>
              <div>
                <span className="font-bold">External</span>
                <div>
                  Squad: <span>{scores.squad}</span>
                </div>
                <div>
                  Feature: <span>{scores.feature}</span>
                </div>
                <div>
                  Product: <span>{scores.product}</span>
                </div>
                <div>
                  Company: <span>{scores.company}</span>
                </div>
              </div>
              <div>
                <span className="font-bold">Internal</span>
                <div>
                  Motivation: <span>{scores.motivation}</span>
                </div>
                <div>
                  Product Execution: <span>{scores.productExecution}</span>
                </div>
                <div>
                  Customer Insight: <span>{scores.customerInsight}</span>
                </div>
                <div>
                  Influencing People: <span>{scores.influencingPeople}</span>
                </div>
                <div>
                  Product Strategy: <span>{scores.productStrategy}</span>
                </div>
              </div>
            </div>
          </div>
          {/* <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            <AuthShowcase />
          </div> */}
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
